"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(entityData = [], filter = {}) {
    let items = [...entityData];
    if (filter.ids) {
        items = items.filter(d => filter.ids.some(id => id == d.id));
    }
    else {
        Object.keys(filter).filter(key => key !== 'q').forEach(key => {
            if (key.indexOf('_lte') !== -1) {
                // less than or equal
                const realKey = key.replace(/(_lte)$/, '');
                items = items.filter(d => d[realKey] <= filter[key]);
                return;
            }
            if (key.indexOf('_gte') !== -1) {
                // less than or equal
                const realKey = key.replace(/(_gte)$/, '');
                items = items.filter(d => d[realKey] >= filter[key]);
                return;
            }
            if (key.indexOf('_lt') !== -1) {
                // less than or equal
                const realKey = key.replace(/(_lt)$/, '');
                items = items.filter(d => d[realKey] < filter[key]);
                return;
            }
            if (key.indexOf('_gt') !== -1) {
                // less than or equal
                const realKey = key.replace(/(_gt)$/, '');
                items = items.filter(d => d[realKey] > filter[key]);
                return;
            }
            if (Array.isArray(filter[key])) {
                items = items.filter(item => {
                    if (Array.isArray(item[key])) {
                        // array filter and array item value: where all items in values
                        return filter[key].every(v => item[key].some(itemValue => itemValue == v));
                    }
                    // where item in values
                    return filter[key].filter(v => v == item[key]).length > 0;
                });
            }
            else {
                items = items.filter(d => filter[key] instanceof Date
                    ? +d[key] == +filter[key]
                    : d[key] == filter[key]);
            }
        });
        if (filter.q) {
            items = items.filter(d => Object.keys(d).some(key => d[key] &&
                d[key]
                    .toString()
                    .toLowerCase()
                    .includes(filter.q.toLowerCase())));
        }
    }
    return items;
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlGaWx0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwbHlGaWx0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsbUJBQTRFLGFBQWtCLEVBQUUsRUFBRSxTQUFrQixFQUFFO0lBRXJILElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUU1QixJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQ2Q7UUFDQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzdEO1NBRUQ7UUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFFNUQsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5QjtnQkFDQyxxQkFBcUI7Z0JBQ3JCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckQsT0FBTzthQUNQO1lBQ0QsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUM5QjtnQkFDQyxxQkFBcUI7Z0JBQ3JCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVB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RkQsNEJBbUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUZpbHRlciwgSVNvdXJjZURhdGFSb3dCYXNlIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiA8VCBleHRlbmRzIElTb3VyY2VEYXRhUm93QmFzZSA9IElTb3VyY2VEYXRhUm93QmFzZT4oZW50aXR5RGF0YTogVFtdID0gW10sIGZpbHRlcjogSUZpbHRlciA9IHt9KVxue1xuXHRsZXQgaXRlbXMgPSBbLi4uZW50aXR5RGF0YV07XG5cblx0aWYgKGZpbHRlci5pZHMpXG5cdHtcblx0XHRpdGVtcyA9IGl0ZW1zLmZpbHRlcihkID0+IGZpbHRlci5pZHMuc29tZShpZCA9PiBpZCA9PSBkLmlkKSk7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0T2JqZWN0LmtleXMoZmlsdGVyKS5maWx0ZXIoa2V5ID0+IGtleSAhPT0gJ3EnKS5mb3JFYWNoKGtleSA9PlxuXHRcdHtcblx0XHRcdGlmIChrZXkuaW5kZXhPZignX2x0ZScpICE9PSAtMSlcblx0XHRcdHtcblx0XHRcdFx0Ly8gbGVzcyB0aGFuIG9yIGVxdWFsXG5cdFx0XHRcdGNvbnN0IHJlYWxLZXkgPSBrZXkucmVwbGFjZSgvKF9sdGUpJC8sICcnKTtcblx0XHRcdFx0aXRlbXMgPSBpdGVtcy5maWx0ZXIoZCA9PiBkW3JlYWxLZXldIDw9IGZpbHRlcltrZXldKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGtleS5pbmRleE9mKCdfZ3RlJykgIT09IC0xKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBsZXNzIHRoYW4gb3IgZXF1YWxcblx0XHRcdFx0Y29uc3QgcmVhbEtleSA9IGtleS5yZXBsYWNlKC8oX2d0ZSkkLywgJycpO1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbHRlcihkID0+IGRbcmVhbEtleV0gPj0gZmlsdGVyW2tleV0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoa2V5LmluZGV4T2YoJ19sdCcpICE9PSAtMSlcblx0XHRcdHtcblx0XHRcdFx0Ly8gbGVzcyB0aGFuIG9yIGVxdWFsXG5cdFx0XHRcdGNvbnN0IHJlYWxLZXkgPSBrZXkucmVwbGFjZSgvKF9sdCkkLywgJycpO1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbHRlcihkID0+IGRbcmVhbEtleV0gPCBmaWx0ZXJba2V5XSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmIChrZXkuaW5kZXhPZignX2d0JykgIT09IC0xKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBsZXNzIHRoYW4gb3IgZXF1YWxcblx0XHRcdFx0Y29uc3QgcmVhbEtleSA9IGtleS5yZXBsYWNlKC8oX2d0KSQvLCAnJyk7XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZmlsdGVyKGQgPT4gZFtyZWFsS2V5XSA+IGZpbHRlcltrZXldKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXJba2V5XSkpXG5cdFx0XHR7XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ZW0gPT5cblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGl0ZW1ba2V5XSkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly8gYXJyYXkgZmlsdGVyIGFuZCBhcnJheSBpdGVtIHZhbHVlOiB3aGVyZSBhbGwgaXRlbXMgaW4gdmFsdWVzXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyW2tleV0uZXZlcnkodiA9PlxuXHRcdFx0XHRcdFx0XHRpdGVtW2tleV0uc29tZShpdGVtVmFsdWUgPT4gaXRlbVZhbHVlID09IHYpLFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gd2hlcmUgaXRlbSBpbiB2YWx1ZXNcblx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyW2tleV0uZmlsdGVyKHYgPT4gdiA9PSBpdGVtW2tleV0pLmxlbmd0aCA+IDA7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbHRlcihcblx0XHRcdFx0XHRkID0+XG5cdFx0XHRcdFx0XHRmaWx0ZXJba2V5XSBpbnN0YW5jZW9mIERhdGVcblx0XHRcdFx0XHRcdFx0PyArZFtrZXldID09ICtmaWx0ZXJba2V5XVxuXHRcdFx0XHRcdFx0XHQ6IGRba2V5XSA9PSBmaWx0ZXJba2V5XSxcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmIChmaWx0ZXIucSlcblx0XHR7XG5cdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbHRlcihkID0+XG5cdFx0XHRcdE9iamVjdC5rZXlzKGQpLnNvbWUoXG5cdFx0XHRcdFx0a2V5ID0+XG5cdFx0XHRcdFx0XHRkW2tleV0gJiZcblx0XHRcdFx0XHRcdGRba2V5XVxuXHRcdFx0XHRcdFx0XHQudG9TdHJpbmcoKVxuXHRcdFx0XHRcdFx0XHQudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHQuaW5jbHVkZXMoZmlsdGVyLnEudG9Mb3dlckNhc2UoKSksXG5cdFx0XHRcdCksXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBpdGVtcztcbn1cbiJdfQ==