"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResolversFromData = exports.getMutationResolvers = exports.getQueryResolvers = void 0;
const inflection_1 = require("inflection");
const graphql_type_json_1 = __importDefault(require("graphql-type-json"));
const all_1 = __importDefault(require("./Query/all"));
const meta_1 = __importDefault(require("./Query/meta"));
const single_1 = __importDefault(require("./Query/single"));
const create_1 = __importDefault(require("./Mutation/create"));
const update_1 = __importDefault(require("./Mutation/update"));
const remove_1 = __importDefault(require("./Mutation/remove"));
const index_1 = __importDefault(require("./Entity/index"));
const nameConverter_1 = require("../utils/nameConverter");
const hasType_1 = __importDefault(require("../introspection/hasType"));
const DateType_1 = require("../introspection/type/DateType");
function getQueryResolvers(entityName, data) {
    let _key = inflection_1.pluralize(entityName);
    return ({
        [`all${_key}`]: all_1.default(data),
        [`_all${_key}Meta`]: meta_1.default(data),
        [entityName]: single_1.default(data),
    });
}
exports.getQueryResolvers = getQueryResolvers;
function getMutationResolvers(entityName, data) {
    return ({
        [`create${entityName}`]: create_1.default(data),
        [`update${entityName}`]: update_1.default(data),
        [`remove${entityName}`]: remove_1.default(data),
    });
}
exports.getMutationResolvers = getMutationResolvers;
function createResolversFromData(data, cb) {
    return Object.keys(data)
        .reduce((resolvers, key) => Object.assign(
    //{},
    resolvers, cb(key, data)), {});
}
exports.createResolversFromData = createResolversFromData;
function resolver(data, options = {}) {
    const resolvers = Object.assign({}, {
        Query: createResolversFromData(data, (key, data) => getQueryResolvers(nameConverter_1.getTypeFromKey(key), data[key])),
        Mutation: createResolversFromData(data, (key, data) => getMutationResolvers(nameConverter_1.getTypeFromKey(key), data[key])),
    }, createResolversFromData(data, (key, data) => {
        return {
            [nameConverter_1.getTypeFromKey(key)]: index_1.default(key, data),
        };
    }), 
    /**
     * required because makeExecutableSchema strips resolvers from typeDefs
     */
    hasType_1.default(DateType_1.DateType, data) ? {
        [DateType_1.DateType.name]: DateType_1.DateType,
    } : {}, 
    /**
     * required because makeExecutableSchema strips resolvers from typeDefs
     */
    hasType_1.default(graphql_type_json_1.default, data) ? {
        JSON: graphql_type_json_1.default
    } : {});
    return resolvers;
}
exports.default = resolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMsMEVBQTRDO0FBRTVDLHNEQUE4QjtBQUM5Qix3REFBZ0M7QUFDaEMsNERBQW9DO0FBQ3BDLCtEQUF1QztBQUN2QywrREFBdUM7QUFDdkMsK0RBQXVDO0FBQ3ZDLDJEQUE0QztBQUM1QywwREFBd0Q7QUFDeEQsdUVBQStDO0FBRy9DLDZEQUEwRDtBQUUxRCxTQUFnQixpQkFBaUIsQ0FBd0QsVUFBa0IsRUFBRSxJQUFTO0lBRXJILElBQUksSUFBSSxHQUFHLHNCQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFakMsT0FBTyxDQUFDO1FBQ1AsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsYUFBRyxDQUFDLElBQUksQ0FBQztRQUN6QixDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDO1FBQy9CLENBQUMsVUFBVSxDQUFDLEVBQUUsZ0JBQU0sQ0FBQyxJQUFJLENBQUM7S0FDMUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQVRELDhDQVNDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQXdELFVBQWtCLEVBQzdHLElBQVM7SUFHVCxPQUFPLENBQUM7UUFDUCxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztRQUNyQyxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztRQUNyQyxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztLQUNyQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBVEQsb0RBU0M7QUFFRCxTQUFnQix1QkFBdUIsQ0FBd0QsSUFBd0IsRUFDdEgsRUFBa0Q7SUFHbEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN0QixNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDekIsTUFBTSxDQUFDLE1BQU07SUFDWixLQUFLO0lBQ0wsU0FBUyxFQUNULEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQ2IsRUFDRixFQUFnQixDQUNoQixDQUFBO0FBQ0gsQ0FBQztBQWJELDBEQWFDO0FBRUQsU0FBd0IsUUFBUSxDQUF3RCxJQUF3QixFQUFFLFVBQW9CLEVBQUU7SUFFdkksTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDOUIsRUFBZ0IsRUFFaEI7UUFFQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsOEJBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsOEJBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUU1RyxFQUVELHVCQUF1QixDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUUzQyxPQUFPO1lBQ04sQ0FBQyw4QkFBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsZUFBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7U0FDaEQsQ0FBQTtJQUNGLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsaUJBQU8sQ0FBQyxtQkFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsbUJBQVE7S0FDekIsQ0FBQyxDQUFDLENBQUMsRUFBZ0I7SUFFcEI7O09BRUc7SUFDSCxpQkFBTyxDQUFDLDJCQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksRUFBRSwyQkFBVztLQUNqQixDQUFDLENBQUMsQ0FBQyxFQUFnQixDQUNwQixDQUFDO0lBRUYsT0FBTyxTQUFTLENBQUE7QUFDakIsQ0FBQztBQXBDRCwyQkFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwbHVyYWxpemUgfSBmcm9tICdpbmZsZWN0aW9uJztcbmltcG9ydCBHcmFwaFFMSlNPTiBmcm9tICdncmFwaHFsLXR5cGUtanNvbic7XG5cbmltcG9ydCBhbGwgZnJvbSAnLi9RdWVyeS9hbGwnO1xuaW1wb3J0IG1ldGEgZnJvbSAnLi9RdWVyeS9tZXRhJztcbmltcG9ydCBzaW5nbGUgZnJvbSAnLi9RdWVyeS9zaW5nbGUnO1xuaW1wb3J0IGNyZWF0ZSBmcm9tICcuL011dGF0aW9uL2NyZWF0ZSc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vTXV0YXRpb24vdXBkYXRlJztcbmltcG9ydCByZW1vdmUgZnJvbSAnLi9NdXRhdGlvbi9yZW1vdmUnO1xuaW1wb3J0IGVudGl0eVJlc29sdmVyIGZyb20gJy4vRW50aXR5L2luZGV4JztcbmltcG9ydCB7IGdldFR5cGVGcm9tS2V5IH0gZnJvbSAnLi4vdXRpbHMvbmFtZUNvbnZlcnRlcic7XG5pbXBvcnQgaGFzVHlwZSBmcm9tICcuLi9pbnRyb3NwZWN0aW9uL2hhc1R5cGUnO1xuaW1wb3J0IHsgSVNvdXJjZURhdGFSb290LCBJU291cmNlRGF0YVJvd0Jhc2UsIElTb3VyY2VEYXRhUm93QmFzZUNvcmUsIElPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgSVJlc29sdmVycyB9IGZyb20gJ2dyYXBocWwtdG9vbHMnO1xuaW1wb3J0IHsgRGF0ZVR5cGUgfSBmcm9tICcuLi9pbnRyb3NwZWN0aW9uL3R5cGUvRGF0ZVR5cGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVlcnlSZXNvbHZlcnM8VCBleHRlbmRzIElTb3VyY2VEYXRhUm93QmFzZUNvcmUgPSBJU291cmNlRGF0YVJvd0Jhc2U+KGVudGl0eU5hbWU6IHN0cmluZywgZGF0YTogVFtdKVxue1xuXHRsZXQgX2tleSA9IHBsdXJhbGl6ZShlbnRpdHlOYW1lKTtcblxuXHRyZXR1cm4gKHtcblx0XHRbYGFsbCR7X2tleX1gXTogYWxsKGRhdGEpLFxuXHRcdFtgX2FsbCR7X2tleX1NZXRhYF06IG1ldGEoZGF0YSksXG5cdFx0W2VudGl0eU5hbWVdOiBzaW5nbGUoZGF0YSksXG5cdH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdXRhdGlvblJlc29sdmVyczxUIGV4dGVuZHMgSVNvdXJjZURhdGFSb3dCYXNlQ29yZSA9IElTb3VyY2VEYXRhUm93QmFzZT4oZW50aXR5TmFtZTogc3RyaW5nLFxuXHRkYXRhOiBUW10sXG4pXG57XG5cdHJldHVybiAoe1xuXHRcdFtgY3JlYXRlJHtlbnRpdHlOYW1lfWBdOiBjcmVhdGUoZGF0YSksXG5cdFx0W2B1cGRhdGUke2VudGl0eU5hbWV9YF06IHVwZGF0ZShkYXRhKSxcblx0XHRbYHJlbW92ZSR7ZW50aXR5TmFtZX1gXTogcmVtb3ZlKGRhdGEpLFxuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyc0Zyb21EYXRhPFQgZXh0ZW5kcyBJU291cmNlRGF0YVJvd0Jhc2VDb3JlID0gSVNvdXJjZURhdGFSb3dCYXNlPihkYXRhOiBJU291cmNlRGF0YVJvb3Q8VD4sXG5cdGNiOiAoa2V5OiBzdHJpbmcsIGRhdGE6IElTb3VyY2VEYXRhUm9vdDxUPikgPT4gYW55LFxuKVxue1xuXHRyZXR1cm4gT2JqZWN0LmtleXMoZGF0YSlcblx0XHQucmVkdWNlKChyZXNvbHZlcnMsIGtleSkgPT5cblx0XHRcdFx0T2JqZWN0LmFzc2lnbihcblx0XHRcdFx0XHQvL3t9LFxuXHRcdFx0XHRcdHJlc29sdmVycyxcblx0XHRcdFx0XHRjYihrZXksIGRhdGEpLFxuXHRcdFx0XHQpLFxuXHRcdFx0e30gYXMgSVJlc29sdmVycyxcblx0XHQpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVyPFQgZXh0ZW5kcyBJU291cmNlRGF0YVJvd0Jhc2VDb3JlID0gSVNvdXJjZURhdGFSb3dCYXNlPihkYXRhOiBJU291cmNlRGF0YVJvb3Q8VD4sIG9wdGlvbnM6IElPcHRpb25zID0ge30pOiBJUmVzb2x2ZXJzXG57XG5cdGNvbnN0IHJlc29sdmVycyA9IE9iamVjdC5hc3NpZ24oXG5cdFx0e30gYXMgSVJlc29sdmVycyxcblxuXHRcdHtcblxuXHRcdFx0UXVlcnk6IGNyZWF0ZVJlc29sdmVyc0Zyb21EYXRhKGRhdGEsIChrZXksIGRhdGEpID0+IGdldFF1ZXJ5UmVzb2x2ZXJzKGdldFR5cGVGcm9tS2V5KGtleSksIGRhdGFba2V5XSkpLFxuXG5cdFx0XHRNdXRhdGlvbjogY3JlYXRlUmVzb2x2ZXJzRnJvbURhdGEoZGF0YSwgKGtleSwgZGF0YSkgPT4gZ2V0TXV0YXRpb25SZXNvbHZlcnMoZ2V0VHlwZUZyb21LZXkoa2V5KSwgZGF0YVtrZXldKSksXG5cblx0XHR9LFxuXG5cdFx0Y3JlYXRlUmVzb2x2ZXJzRnJvbURhdGEoZGF0YSwgKGtleSwgZGF0YSkgPT5cblx0XHR7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRbZ2V0VHlwZUZyb21LZXkoa2V5KV06IGVudGl0eVJlc29sdmVyKGtleSwgZGF0YSksXG5cdFx0XHR9XG5cdFx0fSksXG5cblx0XHQvKipcblx0XHQgKiByZXF1aXJlZCBiZWNhdXNlIG1ha2VFeGVjdXRhYmxlU2NoZW1hIHN0cmlwcyByZXNvbHZlcnMgZnJvbSB0eXBlRGVmc1xuXHRcdCAqL1xuXHRcdGhhc1R5cGUoRGF0ZVR5cGUsIGRhdGEpID8ge1xuXHRcdFx0W0RhdGVUeXBlLm5hbWVdOiBEYXRlVHlwZSxcblx0XHR9IDoge30gYXMgSVJlc29sdmVycyxcblxuXHRcdC8qKlxuXHRcdCAqIHJlcXVpcmVkIGJlY2F1c2UgbWFrZUV4ZWN1dGFibGVTY2hlbWEgc3RyaXBzIHJlc29sdmVycyBmcm9tIHR5cGVEZWZzXG5cdFx0ICovXG5cdFx0aGFzVHlwZShHcmFwaFFMSlNPTiwgZGF0YSkgPyB7XG5cdFx0XHRKU09OOiBHcmFwaFFMSlNPTlxuXHRcdH0gOiB7fSBhcyBJUmVzb2x2ZXJzLFxuXHQpO1xuXG5cdHJldHVybiByZXNvbHZlcnNcbn1cbiJdfQ==