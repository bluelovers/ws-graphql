"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResolversFromData = exports.getMutationResolvers = exports.getQueryResolvers = void 0;
const inflection_1 = require("inflection");
const graphql_type_json_1 = __importDefault(require("graphql-type-json"));
const all_1 = __importDefault(require("./Query/all"));
const meta_1 = __importDefault(require("./Query/meta"));
const single_1 = __importDefault(require("./Query/single"));
const create_1 = __importDefault(require("./Mutation/create"));
const update_1 = __importDefault(require("./Mutation/update"));
const remove_1 = __importDefault(require("./Mutation/remove"));
const index_1 = __importDefault(require("./Entity/index"));
const nameConverter_1 = require("../utils/nameConverter");
const DateType_1 = __importDefault(require("../introspection/DateType"));
const hasType_1 = __importDefault(require("../introspection/hasType"));
function getQueryResolvers(entityName, data) {
    let _key = inflection_1.pluralize(entityName);
    return ({
        [`all${_key}`]: all_1.default(data),
        [`_all${_key}Meta`]: meta_1.default(data),
        [entityName]: single_1.default(data),
    });
}
exports.getQueryResolvers = getQueryResolvers;
function getMutationResolvers(entityName, data) {
    return ({
        [`create${entityName}`]: create_1.default(data),
        [`update${entityName}`]: update_1.default(data),
        [`remove${entityName}`]: remove_1.default(data),
    });
}
exports.getMutationResolvers = getMutationResolvers;
function createResolversFromData(data, cb) {
    return Object.keys(data)
        .reduce((resolvers, key) => Object.assign(
    //{},
    resolvers, cb(key, data)), {});
}
exports.createResolversFromData = createResolversFromData;
function resolver(data) {
    const resolvers = Object.assign({}, {
        Query: createResolversFromData(data, (key, data) => getQueryResolvers(nameConverter_1.getTypeFromKey(key), data[key])),
        Mutation: createResolversFromData(data, (key, data) => getMutationResolvers(nameConverter_1.getTypeFromKey(key), data[key])),
    }, createResolversFromData(data, (key, data) => {
        return {
            [nameConverter_1.getTypeFromKey(key)]: index_1.default(key, data),
        };
    }), 
    /**
     * required because makeExecutableSchema strips resolvers from typeDefs
     */
    hasType_1.default('Date', data) ? { Date: DateType_1.default } : {}, 
    /**
     * required because makeExecutableSchema strips resolvers from typeDefs
     */
    hasType_1.default('JSON', data) ? { JSON: graphql_type_json_1.default } : {});
    return resolvers;
}
exports.default = resolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMsMEVBQTRDO0FBRTVDLHNEQUE4QjtBQUM5Qix3REFBZ0M7QUFDaEMsNERBQW9DO0FBQ3BDLCtEQUF1QztBQUN2QywrREFBdUM7QUFDdkMsK0RBQXVDO0FBQ3ZDLDJEQUE0QztBQUM1QywwREFBd0Q7QUFDeEQseUVBQWlEO0FBQ2pELHVFQUErQztBQUkvQyxTQUFnQixpQkFBaUIsQ0FBd0QsVUFBa0IsRUFBRSxJQUFTO0lBRXJILElBQUksSUFBSSxHQUFHLHNCQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFakMsT0FBTyxDQUFDO1FBQ1AsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsYUFBRyxDQUFDLElBQUksQ0FBQztRQUN6QixDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDO1FBQy9CLENBQUMsVUFBVSxDQUFDLEVBQUUsZ0JBQU0sQ0FBQyxJQUFJLENBQUM7S0FDMUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQVRELDhDQVNDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQXdELFVBQWtCLEVBQzdHLElBQVM7SUFHVCxPQUFPLENBQUM7UUFDUCxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztRQUNyQyxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztRQUNyQyxDQUFDLFNBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxnQkFBTSxDQUFDLElBQUksQ0FBQztLQUNyQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBVEQsb0RBU0M7QUFFRCxTQUFnQix1QkFBdUIsQ0FBd0QsSUFBd0IsRUFDdEgsRUFBa0Q7SUFHbEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN0QixNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDekIsTUFBTSxDQUFDLE1BQU07SUFDWixLQUFLO0lBQ0wsU0FBUyxFQUNULEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQ2IsRUFDRixFQUFnQixDQUNoQixDQUFBO0FBQ0gsQ0FBQztBQWJELDBEQWFDO0FBRUQsU0FBd0IsUUFBUSxDQUF3RCxJQUF3QjtJQUUvRyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUM5QixFQUFnQixFQUVoQjtRQUVDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyw4QkFBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXRHLFFBQVEsRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyw4QkFBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBRTVHLEVBRUQsdUJBQXVCLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBRTNDLE9BQU87WUFDTixDQUFDLDhCQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxlQUFjLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztTQUNoRCxDQUFBO0lBQ0YsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxpQkFBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFnQjtJQUU3RDs7T0FFRztJQUNILGlCQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSwyQkFBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQWdCLENBQ2hFLENBQUM7SUFFRixPQUFPLFNBQVMsQ0FBQTtBQUNqQixDQUFDO0FBaENELDJCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBsdXJhbGl6ZSB9IGZyb20gJ2luZmxlY3Rpb24nO1xuaW1wb3J0IEdyYXBoUUxKU09OIGZyb20gJ2dyYXBocWwtdHlwZS1qc29uJztcblxuaW1wb3J0IGFsbCBmcm9tICcuL1F1ZXJ5L2FsbCc7XG5pbXBvcnQgbWV0YSBmcm9tICcuL1F1ZXJ5L21ldGEnO1xuaW1wb3J0IHNpbmdsZSBmcm9tICcuL1F1ZXJ5L3NpbmdsZSc7XG5pbXBvcnQgY3JlYXRlIGZyb20gJy4vTXV0YXRpb24vY3JlYXRlJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi9NdXRhdGlvbi91cGRhdGUnO1xuaW1wb3J0IHJlbW92ZSBmcm9tICcuL011dGF0aW9uL3JlbW92ZSc7XG5pbXBvcnQgZW50aXR5UmVzb2x2ZXIgZnJvbSAnLi9FbnRpdHkvaW5kZXgnO1xuaW1wb3J0IHsgZ2V0VHlwZUZyb21LZXkgfSBmcm9tICcuLi91dGlscy9uYW1lQ29udmVydGVyJztcbmltcG9ydCBEYXRlVHlwZSBmcm9tICcuLi9pbnRyb3NwZWN0aW9uL0RhdGVUeXBlJztcbmltcG9ydCBoYXNUeXBlIGZyb20gJy4uL2ludHJvc3BlY3Rpb24vaGFzVHlwZSc7XG5pbXBvcnQgeyBJU291cmNlRGF0YVJvb3QsIElTb3VyY2VEYXRhUm93QmFzZSwgSVNvdXJjZURhdGFSb3dCYXNlQ29yZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IElSZXNvbHZlcnMgfSBmcm9tICdncmFwaHFsLXRvb2xzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5UmVzb2x2ZXJzPFQgZXh0ZW5kcyBJU291cmNlRGF0YVJvd0Jhc2VDb3JlID0gSVNvdXJjZURhdGFSb3dCYXNlPihlbnRpdHlOYW1lOiBzdHJpbmcsIGRhdGE6IFRbXSlcbntcblx0bGV0IF9rZXkgPSBwbHVyYWxpemUoZW50aXR5TmFtZSk7XG5cblx0cmV0dXJuICh7XG5cdFx0W2BhbGwke19rZXl9YF06IGFsbChkYXRhKSxcblx0XHRbYF9hbGwke19rZXl9TWV0YWBdOiBtZXRhKGRhdGEpLFxuXHRcdFtlbnRpdHlOYW1lXTogc2luZ2xlKGRhdGEpLFxuXHR9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXV0YXRpb25SZXNvbHZlcnM8VCBleHRlbmRzIElTb3VyY2VEYXRhUm93QmFzZUNvcmUgPSBJU291cmNlRGF0YVJvd0Jhc2U+KGVudGl0eU5hbWU6IHN0cmluZyxcblx0ZGF0YTogVFtdLFxuKVxue1xuXHRyZXR1cm4gKHtcblx0XHRbYGNyZWF0ZSR7ZW50aXR5TmFtZX1gXTogY3JlYXRlKGRhdGEpLFxuXHRcdFtgdXBkYXRlJHtlbnRpdHlOYW1lfWBdOiB1cGRhdGUoZGF0YSksXG5cdFx0W2ByZW1vdmUke2VudGl0eU5hbWV9YF06IHJlbW92ZShkYXRhKSxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNvbHZlcnNGcm9tRGF0YTxUIGV4dGVuZHMgSVNvdXJjZURhdGFSb3dCYXNlQ29yZSA9IElTb3VyY2VEYXRhUm93QmFzZT4oZGF0YTogSVNvdXJjZURhdGFSb290PFQ+LFxuXHRjYjogKGtleTogc3RyaW5nLCBkYXRhOiBJU291cmNlRGF0YVJvb3Q8VD4pID0+IGFueSxcbilcbntcblx0cmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpXG5cdFx0LnJlZHVjZSgocmVzb2x2ZXJzLCBrZXkpID0+XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24oXG5cdFx0XHRcdFx0Ly97fSxcblx0XHRcdFx0XHRyZXNvbHZlcnMsXG5cdFx0XHRcdFx0Y2Ioa2V5LCBkYXRhKSxcblx0XHRcdFx0KSxcblx0XHRcdHt9IGFzIElSZXNvbHZlcnMsXG5cdFx0KVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlcjxUIGV4dGVuZHMgSVNvdXJjZURhdGFSb3dCYXNlQ29yZSA9IElTb3VyY2VEYXRhUm93QmFzZT4oZGF0YTogSVNvdXJjZURhdGFSb290PFQ+KTogSVJlc29sdmVyc1xue1xuXHRjb25zdCByZXNvbHZlcnMgPSBPYmplY3QuYXNzaWduKFxuXHRcdHt9IGFzIElSZXNvbHZlcnMsXG5cblx0XHR7XG5cblx0XHRcdFF1ZXJ5OiBjcmVhdGVSZXNvbHZlcnNGcm9tRGF0YShkYXRhLCAoa2V5LCBkYXRhKSA9PiBnZXRRdWVyeVJlc29sdmVycyhnZXRUeXBlRnJvbUtleShrZXkpLCBkYXRhW2tleV0pKSxcblxuXHRcdFx0TXV0YXRpb246IGNyZWF0ZVJlc29sdmVyc0Zyb21EYXRhKGRhdGEsIChrZXksIGRhdGEpID0+IGdldE11dGF0aW9uUmVzb2x2ZXJzKGdldFR5cGVGcm9tS2V5KGtleSksIGRhdGFba2V5XSkpLFxuXG5cdFx0fSxcblxuXHRcdGNyZWF0ZVJlc29sdmVyc0Zyb21EYXRhKGRhdGEsIChrZXksIGRhdGEpID0+XG5cdFx0e1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0W2dldFR5cGVGcm9tS2V5KGtleSldOiBlbnRpdHlSZXNvbHZlcihrZXksIGRhdGEpLFxuXHRcdFx0fVxuXHRcdH0pLFxuXG5cdFx0LyoqXG5cdFx0ICogcmVxdWlyZWQgYmVjYXVzZSBtYWtlRXhlY3V0YWJsZVNjaGVtYSBzdHJpcHMgcmVzb2x2ZXJzIGZyb20gdHlwZURlZnNcblx0XHQgKi9cblx0XHRoYXNUeXBlKCdEYXRlJywgZGF0YSkgPyB7IERhdGU6IERhdGVUeXBlIH0gOiB7fSBhcyBJUmVzb2x2ZXJzLFxuXG5cdFx0LyoqXG5cdFx0ICogcmVxdWlyZWQgYmVjYXVzZSBtYWtlRXhlY3V0YWJsZVNjaGVtYSBzdHJpcHMgcmVzb2x2ZXJzIGZyb20gdHlwZURlZnNcblx0XHQgKi9cblx0XHRoYXNUeXBlKCdKU09OJywgZGF0YSkgPyB7IEpTT046IEdyYXBoUUxKU09OIH0gOiB7fSBhcyBJUmVzb2x2ZXJzLFxuXHQpO1xuXG5cdHJldHVybiByZXNvbHZlcnNcbn1cbiJdfQ==